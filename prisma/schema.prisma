generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum DiscordStrategy {
  FULL_NAME
  FIRST_NAME
  CID_ONLY
}

model User {
  id                   Int                @id @default(autoincrement())
  navigraph            NavigraphUser?
  vatsim               VatsimUser?
  discordId            String?
  discordStrategy      DiscordStrategy?
  showFriendsInProfile Boolean            @default(false)
  privateMode          Boolean            @default(false)
  privateUntil         DateTime?
  isSup                Boolean            @default(false)
  tokens               UserToken[]
  settings             Json?              @default("{}")
  presets              UserPreset[]
  requests             UserRequest[]
  lists                UserTrackingList[]
}

model UserToken {
  id                Int      @id @default(autoincrement())
  accessToken       String   @unique
  accessTokenExpire DateTime
  refreshMaxDate    DateTime
  userId            Int
  user              User     @relation(onDelete: Cascade, fields: [userId], references: [id])
}

model UserRequest {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(onDelete: Cascade, fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

enum UserPresetType {
  MAP_SETTINGS
  FILTER
  BOOKMARK
  DASHBOARD_BOOKMARK
}

model UserPreset {
  id     Int              @id @default(autoincrement())
  type   UserPresetType
  name   String
  order  Int              @default(0)
  json   Json
  userId Int
  user   User             @relation(onDelete: Cascade, fields: [userId], references: [id])
  lists  UserPresetList[]
}

model UserPresetList {
  id Int @id @default(autoincrement())

  presetId Int
  preset   UserPreset @relation(onDelete: Cascade, fields: [presetId], references: [id])

  listId Int
  list   UserTrackingList @relation(onDelete: Cascade, fields: [listId], references: [id])
}

enum UserTrackingListType {
  FRIENDS
  ACHTUNGS
  OTHER
}

model UserTrackingList {
  id         Int                  @id @default(autoincrement())
  name       String
  color      String
  type       UserTrackingListType @default(OTHER)
  showInMenu Boolean              @default(false)
  users      Json
  userId     Int
  user       User                 @relation(onDelete: Cascade, fields: [userId], references: [id])
  presets    UserPresetList[]
}

enum AuthType {
  NAVIGRAPH
  VATSIM
}

model Auth {
  id              Int              @id @default(autoincrement())
  state           String           @unique
  type            AuthType
  discordId       String?
  discordStrategy DiscordStrategy?
  verifier        String?
  createdAt       DateTime         @default(now())
}

model NavigraphUser {
  id                String   @id
  userId            Int      @unique
  user              User     @relation(onDelete: Cascade, fields: [userId], references: [id])
  accessToken       String   @db.Text
  accessTokenExpire DateTime
  refreshToken      String
  hasFms            Boolean
  hasCharts         Boolean  @default(true)
}

model VatsimUser {
  id                String   @id
  accessToken       String   @db.Text
  accessTokenExpire DateTime
  refreshToken      String   @db.Text
  fullName          String
  userId            Int      @unique
  user              User     @relation(onDelete: Cascade, fields: [userId], references: [id])
}

enum NotamType {
  ERROR
  WARNING
  ANNOUNCEMENT
}

model Notams {
  id          Int       @id @default(autoincrement())
  type        NotamType
  text        String
  activeFrom  DateTime?
  activeTo    DateTime?
  dismissable Boolean
  active      Boolean
}
